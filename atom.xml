<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>文进的博客</title>
  
  <subtitle>Keep Learning Keep Thinking</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-07-06T07:04:21.761Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>谢文进</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第1章 算法在计算中的作用</title>
    <link href="http://example.com/2021/07/06/%E3%80%8A%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E3%80%8B/1%20%E7%AE%97%E6%B3%95%E5%9C%A8%E8%AE%A1%E7%AE%97%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <id>http://example.com/2021/07/06/%E3%80%8A%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E3%80%8B/1%20%E7%AE%97%E6%B3%95%E5%9C%A8%E8%AE%A1%E7%AE%97%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8/</id>
    <published>2021-07-06T07:02:00.000Z</published>
    <updated>2021-07-06T07:04:21.761Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-1-算法"><a href="#1-1-算法" class="headerlink" title="1.1 算法"></a>1.1 算法</h1><ul><li><strong>算法</strong>就是任何良定义的计算过程，该过程取某个值或值得集合作为<strong>输入</strong>并产生某个值或值的集合作为<strong>输出</strong>。</li><li>若对每个输入实例，算法都以正确的输出停机，则称该算法是<strong>正确的</strong>，并称正确的算法<strong>解决了</strong>给定的计算问题。<a id="more"></a></li><li>与人们期望的相反，不正确的算法只要其错误率可控有时可能是有用的。</li><li>算法说明时，唯一的要求是这个说明必须精确描述索要遵循的计算过程。</li><li>数据结构是一种存储和组织数据的方式，旨在便于访问和修改。</li><li>如果你能证明一个问题时NP完全的，那么你可以把时间花在开发一个有效的算法，该算法给出一个好的解，但不一定是最好的可能解。</li></ul><h1 id="1-2-作为一种技术的算法"><a href="#1-2-作为一种技术的算法" class="headerlink" title="1.2 作为一种技术的算法"></a>1.2 作为一种技术的算法</h1><ul><li>是否具有算法知识与技术的坚实基础是区分真正熟练的程序员与初学者的一个特征。</li></ul><h1 id="书籍信息"><a href="#书籍信息" class="headerlink" title="书籍信息"></a>书籍信息</h1><p><a href="https://book.douban.com/subject/20432061/">算法导论</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1-1-算法&quot;&gt;&lt;a href=&quot;#1-1-算法&quot; class=&quot;headerlink&quot; title=&quot;1.1 算法&quot;&gt;&lt;/a&gt;1.1 算法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;算法&lt;/strong&gt;就是任何良定义的计算过程，该过程取某个值或值得集合作为&lt;strong&gt;输入&lt;/strong&gt;并产生某个值或值的集合作为&lt;strong&gt;输出&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;若对每个输入实例，算法都以正确的输出停机，则称该算法是&lt;strong&gt;正确的&lt;/strong&gt;，并称正确的算法&lt;strong&gt;解决了&lt;/strong&gt;给定的计算问题。</summary>
    
    
    
    <category term="《算法导论》" scheme="http://example.com/categories/%E3%80%8A%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E3%80%8B/"/>
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="《算法导论》" scheme="http://example.com/tags/%E3%80%8A%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>4.10 类设计技巧</title>
    <link href="http://example.com/2021/06/30/coreJava1/4.10%20%E7%B1%BB%E8%AE%BE%E8%AE%A1%E6%8A%80%E5%B7%A7/"/>
    <id>http://example.com/2021/06/30/coreJava1/4.10%20%E7%B1%BB%E8%AE%BE%E8%AE%A1%E6%8A%80%E5%B7%A7/</id>
    <published>2021-06-30T01:33:00.000Z</published>
    <updated>2021-06-30T01:38:36.494Z</updated>
    
    <content type="html"><![CDATA[<p>1.<strong>一定要保证数据私有。</strong></p><ul><li>这是最重要的；绝对不要破坏封装性。</li><li>最好还是保持实例字段的私有性。<a id="more"></a></li></ul><p>2.<strong>一定要对数据进行初始化。</strong></p><ul><li>最好不要依赖于系统的默认值，而是应该显式地初始化所有数据，可以提供默认值，也可以在所有构造器中设置默认值。</li></ul><p>3.<strong>不要在类中使用过多的数据类型。</strong></p><p>4.<strong>不是所有字段都需要单独的字段访问器和字段更改器。</strong></p><p>5.<strong>分解过多职责的类。</strong></p><p>6.<strong>类名和方法名要能够体现它们的职责。</strong></p><ul><li>对此有一个很好的惯例：类名应当是一个名词，或者是前面有形容词修饰的名词，或者是动名词（有”-ing”后缀）修饰的名词。</li><li>对于方法来说，要遵循标准惯例：访问器方法用小写get开头（getSalary），更改器方法用小写set开头（setSalary）。</li></ul><p>7.<strong>优先使用不可变类。</strong></p><ul><li>如果类是不可变的，就可以安全地在多个线程时间共享其对象。</li><li>要尽可能让类是不可变的。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;1.&lt;strong&gt;一定要保证数据私有。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这是最重要的；绝对不要破坏封装性。&lt;/li&gt;
&lt;li&gt;最好还是保持实例字段的私有性。</summary>
    
    
    
    <category term="《Java核心技术卷I 基础知识》" scheme="http://example.com/categories/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7I-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E3%80%8B/"/>
    
    
    <category term="《Java核心技术卷I 基础知识》" scheme="http://example.com/tags/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7I-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E3%80%8B/"/>
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>4.9 文档注释</title>
    <link href="http://example.com/2021/06/30/coreJava1/4.9%20%E6%96%87%E6%A1%A3%E6%B3%A8%E9%87%8A/"/>
    <id>http://example.com/2021/06/30/coreJava1/4.9%20%E6%96%87%E6%A1%A3%E6%B3%A8%E9%87%8A/</id>
    <published>2021-06-30T01:19:00.000Z</published>
    <updated>2021-06-30T01:38:50.948Z</updated>
    
    <content type="html"><![CDATA[<ul><li>JDK包含一个很有用的工具，叫做javadoc，它可以由源文件生成一个HTML文档。</li></ul><h2 id="4-9-1-注释的插入"><a href="#4-9-1-注释的插入" class="headerlink" title="4.9.1 注释的插入"></a>4.9.1 注释的插入</h2><ul><li>javadoc实用工具从下面几项抽取信息：<ul><li>模块；</li><li>包；</li><li>公共类与接口；</li><li>公共的和受保护的字段；</li><li>公共的和受保护的构造器及方法。<a id="more"></a></li></ul></li><li>每个/<em>* … </em>/文档注释包含标记以及之后紧跟着的自由格式文本。标记以@开始，如@since或@param。</li><li>自由格式文本的第一句应该是一个<em>概要性</em>的句子。</li><li>在自由格式文本中，可以使用HTML修饰符。</li></ul><h2 id="4-9-2-类注释"><a href="#4-9-2-类注释" class="headerlink" title="4.9.2 类注释"></a>4.9.2 类注释</h2><ul><li>类注释必须放在<code>import</code>语句之后，类定义之前。</li></ul><h2 id="4-9-3-方法注释"><a href="#4-9-3-方法注释" class="headerlink" title="4.9.3 方法注释"></a>4.9.3 方法注释</h2><p>每一个方法注释必须在所描述的方法之前。</p><h2 id="4-9-4-字段注释"><a href="#4-9-4-字段注释" class="headerlink" title="4.9.4 字段注释"></a>4.9.4 字段注释</h2><ul><li>只需要对公共字段（通常是静态常量）建立文档。</li></ul><h2 id="4-9-6-通用注释"><a href="#4-9-6-通用注释" class="headerlink" title="4.9.6 通用注释"></a>4.9.6 通用注释</h2><ul><li>标记@since text会建立一个“since”（始于）条目。<em>text</em>（文本）可以是引入这个特性的版本的任何描述。</li><li>通过@see和@link标记，可以使用超链接，连接到javadoc文档的相关部分或外部文档。</li><li>如果@see标记后面有一个&lt;字符，就需要指定一个超链接。可以超链接到任何URL。</li><li>如果@see标机后面有一个双引号（”）字符，文本就会显示在”see also”部分。</li><li>可以为一个特性添加多个@see标记，但必须将它们放在一起。</li><li>要想产生<em>包注释</em>，就需要在每一个包目录中添加一个单独的文件。</li></ul><h2 id="4-9-7-注释抽取"><a href="#4-9-7-注释抽取" class="headerlink" title="4.9.7 注释抽取"></a>4.9.7 注释抽取</h2><p>略。</p>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;JDK包含一个很有用的工具，叫做javadoc，它可以由源文件生成一个HTML文档。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;4-9-1-注释的插入&quot;&gt;&lt;a href=&quot;#4-9-1-注释的插入&quot; class=&quot;headerlink&quot; title=&quot;4.9.1 注释的插入&quot;&gt;&lt;/a&gt;4.9.1 注释的插入&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;javadoc实用工具从下面几项抽取信息：&lt;ul&gt;
&lt;li&gt;模块；&lt;/li&gt;
&lt;li&gt;包；&lt;/li&gt;
&lt;li&gt;公共类与接口；&lt;/li&gt;
&lt;li&gt;公共的和受保护的字段；&lt;/li&gt;
&lt;li&gt;公共的和受保护的构造器及方法。</summary>
    
    
    
    <category term="《Java核心技术卷I 基础知识》" scheme="http://example.com/categories/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7I-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E3%80%8B/"/>
    
    
    <category term="《Java核心技术卷I 基础知识》" scheme="http://example.com/tags/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7I-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E3%80%8B/"/>
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>4.8 JAR文件</title>
    <link href="http://example.com/2021/06/30/coreJava1/4.8%20JAR%E6%96%87%E4%BB%B6/"/>
    <id>http://example.com/2021/06/30/coreJava1/4.8%20JAR%E6%96%87%E4%BB%B6/</id>
    <published>2021-06-30T00:43:00.000Z</published>
    <updated>2021-06-30T00:44:27.149Z</updated>
    
    <content type="html"><![CDATA[<ul><li>一个JAR文件既可以包含类文件，也可以包含诸如图像和声音等其他类型的文件。此外，JAR文件是压缩的，它使用了我们熟悉的ZIP压缩格式。</li></ul><h2 id="4-8-1-创建JAR文件"><a href="#4-8-1-创建JAR文件" class="headerlink" title="4.8.1 创建JAR文件"></a>4.8.1 创建JAR文件</h2><ul><li>创建一个新JAR文件组常用的命令使用以下语法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar cvf jarFileName file1 file2 ...</span><br></pre></td></tr></table></figure><ul><li>通常，jar命令的格式如下：<a id="more"></a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar options file1 file2 ...</span><br></pre></td></tr></table></figure><h2 id="4-8-2-清单文件"><a href="#4-8-2-清单文件" class="headerlink" title="4.8.2 清单文件"></a>4.8.2 清单文件</h2><ul><li>每个JAR文件包含一个<em>清单文件</em>，描述归档文件的特殊特性。</li><li>复杂清单文件可能包含更多条目。这些清单条目被分成多个节。第一节被称为主节。它作用于整个JAR文件。随后的条目用来指定命名实体的属性。 </li><li>要想要编辑清单文件，需要将希望添加到清单文件中的行放到文本文件中，然后运行：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar cfm jarFileName manifestFileName</span><br></pre></td></tr></table></figure><h2 id="4-8-3-可执行JAR文件"><a href="#4-8-3-可执行JAR文件" class="headerlink" title="4.8.3 可执行JAR文件"></a>4.8.3 可执行JAR文件</h2><ul><li>可以使用<code>jar</code>命令中的e选项指定程序的<em>入口点</em>，即通常需要在调用java程序启动器时指定类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar cvfe Myprogram.jar com.mycompany.mypkg.MainAppClass files to add</span><br></pre></td></tr></table></figure><ul><li>或者，可以在清单文件中指定程序的<em>主类</em>，包括以下形式的语句：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Main-Class: com.mycompany.mypkg.MainAppClass</span><br></pre></td></tr></table></figure><h2 id="4-8-4-多版本JAR文件"><a href="#4-8-4-多版本JAR文件" class="headerlink" title="4.8.4 多版本JAR文件"></a>4.8.4 多版本JAR文件</h2><ul><li>Java9引入了<em>多版本JAR</em>，其中可以包含面向不同Java版本的类文件。</li><li>为了保证向后兼容，额外的类文件放在META-INF/versions目录中。</li><li>多版本JAR并不适用于不同版本的程序或库。</li><li>多版本JAR的唯一目的是支持你的某个特定版本的程序或库能够在多个不同的JDK版本上运行。</li></ul><h2 id="4-8-5-关于命令行选项的说明"><a href="#4-8-5-关于命令行选项的说明" class="headerlink" title="4.8.5 关于命令行选项的说明"></a>4.8.5 关于命令行选项的说明</h2><ul><li>Java开发包（JDK）的命令行选项一直以来都使用单个短横线加多字母选项名的形式。</li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;一个JAR文件既可以包含类文件，也可以包含诸如图像和声音等其他类型的文件。此外，JAR文件是压缩的，它使用了我们熟悉的ZIP压缩格式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;4-8-1-创建JAR文件&quot;&gt;&lt;a href=&quot;#4-8-1-创建JAR文件&quot; class=&quot;headerlink&quot; title=&quot;4.8.1 创建JAR文件&quot;&gt;&lt;/a&gt;4.8.1 创建JAR文件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;创建一个新JAR文件组常用的命令使用以下语法：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;jar cvf jarFileName file1 file2 ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;通常，jar命令的格式如下：</summary>
    
    
    
    <category term="《Java核心技术卷I 基础知识》" scheme="http://example.com/categories/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7I-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E3%80%8B/"/>
    
    
    <category term="《Java核心技术卷I 基础知识》" scheme="http://example.com/tags/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7I-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E3%80%8B/"/>
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>4.7 包</title>
    <link href="http://example.com/2021/06/29/coreJava1/4.7%20%E5%8C%85/"/>
    <id>http://example.com/2021/06/29/coreJava1/4.7%20%E5%8C%85/</id>
    <published>2021-06-29T12:00:00.000Z</published>
    <updated>2021-06-29T23:57:38.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="4-7-1-包名"><a href="#4-7-1-包名" class="headerlink" title="4.7.1 包名"></a>4.7.1 包名</h2><ul><li>使用包的主要原因是确保类名的唯一性。</li><li>假如两个程序员不约而同地建立了Employee类。只要将这些类放置在不同的包中，就不会产生冲突。</li><li>每一个包都是独立的类集合。<a id="more"></a></li></ul><h2 id="4-7-2-类的导入"><a href="#4-7-2-类的导入" class="headerlink" title="4.7.2 类的导入"></a>4.7.2 类的导入</h2><ul><li>一个类可以使用所属包中的所有类，以及其他包中的<strong>公共类</strong>。</li><li>两种方式访问另一个包中的公共类：<ul><li>第一种方式是使用<strong>完全限定名</strong>，就是包名后面跟着类名。<br><code>java.time.LocalDate today = java.time.LocalDate.now();</code></li><li>第二种方式是使用<code>import</code>语句导入一个特定的类或者整个包。<code>import</code>语句应该位于源文件的顶部（但位于<code>package</code>语句的后面）。</li></ul></li><li>需要注意的是，只能使用星号（*）导入一个包。</li><li>在发生命名冲突的时候，就要注意包了。</li><li>确定要使用的是具体哪一个类时，可以增加一个特定的<code>import</code>语句。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br></pre></td></tr></table></figure><ul><li>如果两个<code>Date</code>类都需要使用，则在每个类名的前面加上完整的包名。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> deadline = <span class="keyword">new</span> java.util.Date();</span><br><span class="line"><span class="keyword">var</span> today = <span class="keyword">new</span> java.sql.Date(...);</span><br></pre></td></tr></table></figure><h2 id="4-7-3-静态导入"><a href="#4-7-3-静态导入" class="headerlink" title="4.7.3 静态导入"></a>4.7.3 静态导入</h2><ul><li>有一种<code>import</code>语句允许导入静态方法和静态字段，而不只是类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.System.*;</span><br></pre></td></tr></table></figure><p>这样就可以使用<code>System</code>类的静态方法和静态字段，而不必加类名前缀：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">out.println(<span class="string">&quot;Goodbye, World!&quot;</span>); <span class="comment">// i.e., System.out</span></span><br><span class="line">exit(<span class="number">0</span>); <span class="comment">// i.e., System.exit</span></span><br></pre></td></tr></table></figure><ul><li>还可以导入特定的方法或字段</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.System.out;</span><br></pre></td></tr></table></figure><ul><li><code>import</code>加了<code>static</code>就很强大了，可以使用静态方法或字段。</li></ul><h2 id="4-7-4-在包中增加类"><a href="#4-7-4-在包中增加类" class="headerlink" title="4.7.4 在包中增加类"></a>4.7.4 在包中增加类</h2><ul><li>要想将类放入包中，就必须将包的名字放在源文件的开头，即放在定义这个包中各个类的代码之前。</li><li>如果没有在源文件中放置<code>package</code>语句，这个源文件中的类就属于<strong>无名包</strong>。</li><li>编译器处理文件（带有文件分隔符和扩展名.java的文件），而Java解释器加载<strong>类</strong>（带有.分隔符）。</li><li>如果包与目录不匹配，<strong>虚拟机</strong>就找不到类。</li></ul><h3 id="程序清单"><a href="#程序清单" class="headerlink" title="程序清单"></a>程序清单</h3><h4 id="程序清单4-6-PackageTest-PackageTest-java"><a href="#程序清单4-6-PackageTest-PackageTest-java" class="headerlink" title="程序清单4-6 PackageTest/PackageTest.java"></a>程序清单4-6 PackageTest/PackageTest.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.horstmann.corejava.*;</span><br><span class="line"><span class="comment">// the Employee class is defined in that package</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.System.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This program demonstrates the use of the packages.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.11 2021-06-29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jinjin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PackageTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// because of the import statement, we don&#x27;t have to use</span></span><br><span class="line">        <span class="comment">// com.horstmann.corejava.Employee here</span></span><br><span class="line">        <span class="keyword">var</span> harry = <span class="keyword">new</span> Employee(<span class="string">&quot;Harry Hacker&quot;</span>, <span class="number">50000</span>, <span class="number">1989</span>, <span class="number">10</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        harry.raiseSalary(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// because of the static import statement, we don&#x27;t have to use System.out here</span></span><br><span class="line">        out.println(<span class="string">&quot;name=&quot;</span> + harry.getName() +<span class="string">&quot;,salary=&quot;</span> + harry.getSalary());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="程序清单4-7-PackageTest-com-horstmann-Employee-java"><a href="#程序清单4-7-PackageTest-com-horstmann-Employee-java" class="headerlink" title="程序清单4-7 PackageTest/com/horstmann/Employee.java"></a>程序清单4-7 PackageTest/com/horstmann/Employee.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.horstmann.corejava;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the classes in this file are part of this package</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import statements come after the package statement</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.11 2021-06-29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jinjin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line">    <span class="keyword">private</span> LocalDate hireDay;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name, <span class="keyword">double</span> salary, <span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">        hireDay = LocalDate.of(year, month, day);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDate <span class="title">getHireDay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hireDay;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">raiseSalary</span><span class="params">(<span class="keyword">double</span> byPercent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> raise = salary * byPercent / <span class="number">100</span>;</span><br><span class="line">        salary += raise;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-7-5-包访问"><a href="#4-7-5-包访问" class="headerlink" title="4.7.5 包访问"></a>4.7.5 包访问</h2><ul><li>标记为<code>public</code>的部分可以由任意类使用；标记为<code>private</code>的部分只能由定义它们的类使用。</li><li>如果没有指定<code>public</code>或<code>private</code>，这个部分（类、方法或变量）可以被同一个包中的所有方法访问。</li><li>变量必须显式地标记为<code>private</code>，不然的话将默认为包可访问。显然，这样做会破坏封装性。</li></ul><h2 id="4-7-6-类路径"><a href="#4-7-6-类路径" class="headerlink" title="4.7.6 类路径"></a>4.7.6 类路径</h2><ul><li>类的路径必须与包名匹配。</li><li>类文件也可以存储在JAR(Java归档)文件中。</li></ul><h2 id="4-7-7-设置类路径"><a href="#4-7-7-设置类路径" class="headerlink" title="4.7.7 设置类路径"></a>4.7.7 设置类路径</h2><ul><li>最好使用<code>-classpath</code>（或<code>-cp</code>,或者Java9中的<code>--class-path</code>）选项指定类路径。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;4-7-1-包名&quot;&gt;&lt;a href=&quot;#4-7-1-包名&quot; class=&quot;headerlink&quot; title=&quot;4.7.1 包名&quot;&gt;&lt;/a&gt;4.7.1 包名&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用包的主要原因是确保类名的唯一性。&lt;/li&gt;
&lt;li&gt;假如两个程序员不约而同地建立了Employee类。只要将这些类放置在不同的包中，就不会产生冲突。&lt;/li&gt;
&lt;li&gt;每一个包都是独立的类集合。</summary>
    
    
    
    <category term="《Java核心技术卷I 基础知识》" scheme="http://example.com/categories/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7I-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E3%80%8B/"/>
    
    
    <category term="《Java核心技术卷I 基础知识》" scheme="http://example.com/tags/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7I-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E3%80%8B/"/>
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>4.6 对象构造</title>
    <link href="http://example.com/2021/06/28/coreJava1/4.6%20%E5%AF%B9%E8%B1%A1%E6%9E%84%E9%80%A0/"/>
    <id>http://example.com/2021/06/28/coreJava1/4.6%20%E5%AF%B9%E8%B1%A1%E6%9E%84%E9%80%A0/</id>
    <published>2021-06-28T11:14:00.000Z</published>
    <updated>2021-06-28T11:14:38.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="4-6-1-重载"><a href="#4-6-1-重载" class="headerlink" title="4.6.1 重载"></a>4.6.1 重载</h2><ul><li>如果多个方法有相同的名字、不同的参数，便出现了重载。</li><li>查找匹配的过程被称为重载解析。</li><li>Java允许重载任何方法。</li><li>要完整地描述一个方法，需要指定方法名以及参数类型，这叫作方法的签名。</li><li>返回类型不是方法签名的一部分。也就是说，不能有两个名字相同、参数类型也相同却有不同返回类型的方法。<a id="more"></a></li></ul><h2 id="4-6-2-默认字段初始化"><a href="#4-6-2-默认字段初始化" class="headerlink" title="4.6.2 默认字段初始化"></a>4.6.2 默认字段初始化</h2><ul><li>如果在构造器中没有显示地为字段设置初值，那么就会被自动地赋为默认值：数值为0、布尔值为false、对象引用为null。</li><li><strong>字段与局部变量的一个重要区别</strong>：方法中的局部变量必须明确地初始化，但是在类中，如果没有初始化类中的字段，将会自动初始化为默认值。</li></ul><h2 id="4-6-3-无参数的构造器"><a href="#4-6-3-无参数的构造器" class="headerlink" title="4.6.3 无参数的构造器"></a>4.6.3 无参数的构造器</h2><ul><li>由无参数构造器创建对象时，对象的状态会设置为适当的默认值。</li><li>如果写一个类时没有编写构造器，就会为你提供一个无参数构造器。</li><li>如果类中提供了至少一个构造器，但是没有提供无参数的构造器，那么构造对象时如果提供参数就是不合法的。</li><li><strong>仅</strong>当类没有任何其他构造器的时候，你才会得到一个默认的无参数构造器。</li></ul><h2 id="4-6-4-显式字段初始化"><a href="#4-6-4-显式字段初始化" class="headerlink" title="4.6.4 显式字段初始化"></a>4.6.4 显式字段初始化</h2><ul><li>不管怎样调用构造器，每个实例字段都要设置一个有意义的初值，确保这一点总是一个好主意。</li><li>初始值不一定是常量值。</li></ul><h2 id="4-6-5-参数名"><a href="#4-6-5-参数名" class="headerlink" title="4.6.5 参数名"></a>4.6.5 参数名</h2><ul><li>有些程序员在每个参数前面加上一个前缀”a”。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String aName, <span class="keyword">double</span> aSalary)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    name = aName;</span><br><span class="line">    salary = aSalary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>另一种技巧：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name, <span class="keyword">double</span> salary)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-6-6-调用另一个构造器"><a href="#4-6-6-调用另一个构造器" class="headerlink" title="4.6.6 调用另一个构造器"></a>4.6.6 调用另一个构造器</h2><ul><li>如果构造器的第一个语句形如<code>this(...)</code>，这个构造器将调用同一个类的另一个构造器。</li></ul><h2 id="4-6-7-初始化块"><a href="#4-6-7-初始化块" class="headerlink" title="4.6.7 初始化块"></a>4.6.7 初始化块</h2><ul><li>初始化数据字段的方法：<ul><li>在构造器中设置值；</li><li>在声明中赋值；</li><li>初始化块。</li></ul></li></ul><h2 id="4-6-8-对象析构与finalize方法"><a href="#4-6-8-对象析构与finalize方法" class="headerlink" title="4.6.8 对象析构与finalize方法"></a>4.6.8 对象析构与finalize方法</h2><ul><li>由于Java会完成自动的垃圾回收，不需要人工回收内存，所以Java不支持析构器。</li></ul><h2 id="程序清单"><a href="#程序清单" class="headerlink" title="程序清单"></a>程序清单</h2><p>ConstructorTest/ConstructorTest.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch4.ConstructorTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This program demonstrates object construction.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.02 2021-06-28</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jinjin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructorTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// fill the staff array with three Employee objects</span></span><br><span class="line">        <span class="keyword">var</span> staff = <span class="keyword">new</span> Employee[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        staff[<span class="number">0</span>] = <span class="keyword">new</span> Employee(<span class="string">&quot;Harry&quot;</span>, <span class="number">40000</span>);</span><br><span class="line">        staff[<span class="number">1</span>] = <span class="keyword">new</span> Employee(<span class="number">60000</span>);</span><br><span class="line">        staff[<span class="number">2</span>] = <span class="keyword">new</span> Employee();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// print out information about all Employee objects</span></span><br><span class="line">        <span class="keyword">for</span> (Employee e : staff)</span><br><span class="line">            System.out.println(<span class="string">&quot;name=&quot;</span> + e.getName() + <span class="string">&quot;,id=&quot;</span> + e.getId() + <span class="string">&quot;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;,salary=&quot;</span> + e.getSalary());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> nextId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;&quot;</span>; <span class="comment">// instance field initialization</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// static initialization block</span></span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> generator = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">// set nextId to a random number between 0 and 9999</span></span><br><span class="line">        nextId = generator.nextInt(<span class="number">10000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// object initialization block</span></span><br><span class="line">    &#123;</span><br><span class="line">        id = nextId;</span><br><span class="line">        nextId++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// three overloaded constructors</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String n, <span class="keyword">double</span> s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">        salary = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(<span class="keyword">double</span> s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// calls the Employee(String, double) constructor</span></span><br><span class="line">        <span class="keyword">this</span>(<span class="string">&quot;Employee #&quot;</span> + nextId, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the default constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">Employee</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// name initialized to &quot;&quot; --see above</span></span><br><span class="line">        <span class="comment">// salary not explicitly set --initialized to 0</span></span><br><span class="line">        <span class="comment">// id initialized in initialization block</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;4-6-1-重载&quot;&gt;&lt;a href=&quot;#4-6-1-重载&quot; class=&quot;headerlink&quot; title=&quot;4.6.1 重载&quot;&gt;&lt;/a&gt;4.6.1 重载&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;如果多个方法有相同的名字、不同的参数，便出现了重载。&lt;/li&gt;
&lt;li&gt;查找匹配的过程被称为重载解析。&lt;/li&gt;
&lt;li&gt;Java允许重载任何方法。&lt;/li&gt;
&lt;li&gt;要完整地描述一个方法，需要指定方法名以及参数类型，这叫作方法的签名。&lt;/li&gt;
&lt;li&gt;返回类型不是方法签名的一部分。也就是说，不能有两个名字相同、参数类型也相同却有不同返回类型的方法。</summary>
    
    
    
    <category term="《Java核心技术卷I 基础知识》" scheme="http://example.com/categories/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7I-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E3%80%8B/"/>
    
    
    <category term="《Java核心技术卷I 基础知识》" scheme="http://example.com/tags/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7I-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E3%80%8B/"/>
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>4.5 方法参数</title>
    <link href="http://example.com/2021/06/25/coreJava1/4.5%20%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0/"/>
    <id>http://example.com/2021/06/25/coreJava1/4.5%20%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0/</id>
    <published>2021-06-25T02:11:00.000Z</published>
    <updated>2021-06-25T05:23:21.733Z</updated>
    
    <content type="html"><![CDATA[<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><ul><li><strong>按值调用</strong>（call by value）表示方法接收的是调用者提供的值。</li><li><strong>按引用调用</strong>（call by reference）表示方法接收的是调用者提供的变量地址。</li><li>方法可以修改按引用传递的变量的值，而不能修改按值传递的变量的值。</li><li>Java程序设计语言<strong>总是</strong>采用按值调用。</li><li>有两种类型的方法参数：<ul><li>基本数据类型（数字、布尔值）。</li><li>对象引用。<a id="more"></a></li></ul></li><li>一个方法不可能修改基本数据类型的参数，而对象引用作为参数就不同了。</li><li>实现一个改变对象参数状态的方法是完全可以的。理由很简单，方法得到的是对象引用的副本，原来的对象引用和这个副本都引用同一个对象。</li><li>Java程序设计语言对对象采用的不是引用调用，实际上，对象引用采用的是按值传递。</li><li><strong>Java中对方法参数能做什么和不能做什么</strong>：<ul><li>方法不能修改基本数据类型的参数（即数值型和布尔型）。</li><li>方法可以改变对象参数的状态。</li><li>方法不能让一个对象参数引用一个新的对象参数。</li></ul></li></ul><h2 id="程序清单"><a href="#程序清单" class="headerlink" title="程序清单"></a>程序清单</h2><ul><li>程序清单4-4 ParamTest/ParamTest.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ch4.ParamTest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This program demonstrates parameter passing in Java</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.01 2021-06-25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jinjin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * Test 1: Methods can&#x27;t modify numeric parameters</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Testing tripleValue:&quot;</span>);</span><br><span class="line">        <span class="keyword">double</span> percent = <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;Before: percent=&quot;</span> + percent);</span><br><span class="line">        tripleValue(percent);</span><br><span class="line">        System.out.println(<span class="string">&quot;After: percent=&quot;</span> + percent);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * Test 2: Methods can change the state of object parameters</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;\nTesting tripleSalary:&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> harry = <span class="keyword">new</span> Employee(<span class="string">&quot;Harry&quot;</span>, <span class="number">50000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Before: salary=&quot;</span> + harry.getSalary());</span><br><span class="line">        tripSalary(harry);</span><br><span class="line">        System.out.println(<span class="string">&quot;After: salary=&quot;</span> + harry.getSalary());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * Test 3: Methods can&#x27;t attach new objects to object parameters</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;\nTesting swap:&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> a = <span class="keyword">new</span> Employee(<span class="string">&quot;Alice&quot;</span>, <span class="number">70000</span>);</span><br><span class="line">        <span class="keyword">var</span> b = <span class="keyword">new</span> Employee(<span class="string">&quot;Bob&quot;</span>, <span class="number">60000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Before: a=&quot;</span> + a.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;Before: b=&quot;</span> + b.getName());</span><br><span class="line">        swap(a, b);</span><br><span class="line">        System.out.println(<span class="string">&quot;After: a=&quot;</span> + a.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;After: b=&quot;</span> + b.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tripleValue</span><span class="params">(<span class="keyword">double</span> x)</span> <span class="comment">// doesn&#x27;t work</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x = <span class="number">3</span> * x;</span><br><span class="line">        System.out.println(<span class="string">&quot;End of method: x=&quot;</span> + x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tripSalary</span><span class="params">(Employee x)</span> <span class="comment">// works</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x.raiseSalary(<span class="number">200</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;End of method: salary=&quot;</span> + x.getSalary());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Employee x, Employee y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Employee temp = x;</span><br><span class="line">        x = y;</span><br><span class="line">        y = temp;</span><br><span class="line">        System.out.println(<span class="string">&quot;End of method: x=&quot;</span> + x.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;End of method: y=&quot;</span> + y.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> // <span class="title">simplified</span> <span class="title">Employee</span> <span class="title">class</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String n, <span class="keyword">double</span> s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">        salary = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">raiseSalary</span><span class="params">(<span class="keyword">double</span> byPercent)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> raise = salary * byPercent / <span class="number">100</span>;</span><br><span class="line">        salary += raise;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;笔记&quot;&gt;&lt;a href=&quot;#笔记&quot; class=&quot;headerlink&quot; title=&quot;笔记&quot;&gt;&lt;/a&gt;笔记&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;按值调用&lt;/strong&gt;（call by value）表示方法接收的是调用者提供的值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;按引用调用&lt;/strong&gt;（call by reference）表示方法接收的是调用者提供的变量地址。&lt;/li&gt;
&lt;li&gt;方法可以修改按引用传递的变量的值，而不能修改按值传递的变量的值。&lt;/li&gt;
&lt;li&gt;Java程序设计语言&lt;strong&gt;总是&lt;/strong&gt;采用按值调用。&lt;/li&gt;
&lt;li&gt;有两种类型的方法参数：&lt;ul&gt;
&lt;li&gt;基本数据类型（数字、布尔值）。&lt;/li&gt;
&lt;li&gt;对象引用。</summary>
    
    
    
    <category term="《Java核心技术卷I 基础知识》" scheme="http://example.com/categories/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7I-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E3%80%8B/"/>
    
    
    <category term="《Java核心技术卷I 基础知识》" scheme="http://example.com/tags/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7I-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E3%80%8B/"/>
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>4.4 静态字段与静态方法</title>
    <link href="http://example.com/2021/06/21/coreJava1/4.4%20%E9%9D%99%E6%80%81%E5%AD%97%E6%AE%B5%E4%B8%8E%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2021/06/21/coreJava1/4.4%20%E9%9D%99%E6%80%81%E5%AD%97%E6%AE%B5%E4%B8%8E%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95/</id>
    <published>2021-06-21T11:44:00.000Z</published>
    <updated>2021-06-21T12:45:00.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4-4-1-静态字段"><a href="#4-4-1-静态字段" class="headerlink" title="4.4.1 静态字段"></a>4.4.1 静态字段</h1><ul><li>如果将一个字段定义为<code>static</code>，每个类只有一个这样的字段。而对于非静态的实例字段，每个对象都有自己的一个副本。</li><li>即使没有<code>Employee</code>对象，静态字段<code>nextId</code>也存在。它属于类，而不属于任何单个的对象。</li><li>静态字段可以理解为<strong>类字段</strong>。<a id="more"></a></li></ul><h1 id="4-4-2-静态常量"><a href="#4-4-2-静态常量" class="headerlink" title="4.4.2 静态常量"></a>4.4.2 静态常量</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Math</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.14159265358979323846</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以用<code>Math.PI</code>来访问这个常量。</li><li>如果省略关键字<code>static</code>，<code>PI</code>就变成了<code>Math</code>类的一个实例字段，需要通过<code>Math</code>类的一个对象来访问<code>PI</code>，并且每一个<code>Math</code>类对象都有它自己的一个<code>PI</code>副本。</li><li>一个常见的静态常量：<code>System.out</code>。</li></ul><h1 id="4-4-3-静态方法"><a href="#4-4-3-静态方法" class="headerlink" title="4.4.3 静态方法"></a>4.4.3 静态方法</h1><ul><li>静态方法是不在对象上执行的方法。</li><li>可以认为静态方法是没有<code>this</code>参数的方法。</li><li>静态方法可以访问静态字段。</li><li><strong>建议使用类名而不是对象来调用静态方法。</strong></li><li>在下面两种情况<strong>可以使用静态方法</strong>：<ul><li>方法不需要访问对象状态，因为它需要的所有参数都通过显式参数提供（例如：<code>Math.pow</code>）。</li><li>方法只需要访问类的静态字段（例如：<code>Employee.getNextId</code>）。</li></ul></li></ul><h1 id="4-4-4-工厂方法"><a href="#4-4-4-工厂方法" class="headerlink" title="4.4.4 工厂方法"></a>4.4.4 工厂方法</h1><ul><li><strong>有待理解</strong></li></ul><h1 id="4-4-5-main方法"><a href="#4-4-5-main方法" class="headerlink" title="4.4.5 main方法"></a>4.4.5 main方法</h1><ul><li><code>main</code>方法也是一个静态方法。</li><li><code>main</code>方法不对任何对象进行操作。静态的<code>main</code>方法将执行并构造程序所需要的对象。</li><li><strong>每一个类可以有一个<code>main</code>方法</strong>，这是常用于对类进行单元测试的一个技巧。</li></ul><h1 id="程序清单4-3-StaticTest-StaticTest-java"><a href="#程序清单4-3-StaticTest-StaticTest-java" class="headerlink" title="程序清单4-3 StaticTest/StaticTest.java"></a>程序清单4-3 StaticTest/StaticTest.java</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This program demonstrates static methods.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.02 2021-06-21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jinjin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> ch4.StaticTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// fill the staff array with three Employee objects</span></span><br><span class="line">        <span class="keyword">var</span> staff = <span class="keyword">new</span> Employee[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        staff[<span class="number">0</span>] = <span class="keyword">new</span> Employee(<span class="string">&quot;Tom&quot;</span>, <span class="number">40000</span>);</span><br><span class="line">        staff[<span class="number">1</span>] = <span class="keyword">new</span> Employee(<span class="string">&quot;Dick&quot;</span>, <span class="number">60000</span>);</span><br><span class="line">        staff[<span class="number">2</span>] = <span class="keyword">new</span> Employee(<span class="string">&quot;Harry&quot;</span>, <span class="number">65000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// print out information about all Employee objects</span></span><br><span class="line">        <span class="keyword">for</span> (Employee e : staff) &#123;</span><br><span class="line">            e.setId();</span><br><span class="line">            System.out.println(<span class="string">&quot;name=&quot;</span> + e.getName() + <span class="string">&quot;,id=&quot;</span> + e.getId() + <span class="string">&quot;,salary=&quot;</span></span><br><span class="line">            + e.getSalary());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = Employee.getNextId(); <span class="comment">// calls static method</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Next available id=&quot;</span> + n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> nextId = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String n, <span class="keyword">double</span> s)</span> </span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">        salary = s;</span><br><span class="line">        id = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        id = nextId; <span class="comment">// set id to next available id</span></span><br><span class="line">        nextId++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getNextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nextId; <span class="comment">// return static field</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; <span class="comment">// unit test</span></span><br><span class="line">        <span class="keyword">var</span> e = <span class="keyword">new</span> Employee(<span class="string">&quot;Harry&quot;</span>, <span class="number">50000</span>);</span><br><span class="line">        System.out.println(e.getName() + <span class="string">&quot; &quot;</span> + e.getSalary());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>可以用<code>Employee</code>类的静态<code>main</code>方法进行单元测试，运行<code>java Employee</code>。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;4-4-1-静态字段&quot;&gt;&lt;a href=&quot;#4-4-1-静态字段&quot; class=&quot;headerlink&quot; title=&quot;4.4.1 静态字段&quot;&gt;&lt;/a&gt;4.4.1 静态字段&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;如果将一个字段定义为&lt;code&gt;static&lt;/code&gt;，每个类只有一个这样的字段。而对于非静态的实例字段，每个对象都有自己的一个副本。&lt;/li&gt;
&lt;li&gt;即使没有&lt;code&gt;Employee&lt;/code&gt;对象，静态字段&lt;code&gt;nextId&lt;/code&gt;也存在。它属于类，而不属于任何单个的对象。&lt;/li&gt;
&lt;li&gt;静态字段可以理解为&lt;strong&gt;类字段&lt;/strong&gt;。</summary>
    
    
    
    <category term="《Java核心技术卷I 基础知识》" scheme="http://example.com/categories/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7I-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E3%80%8B/"/>
    
    
    <category term="《Java核心技术卷I 基础知识》" scheme="http://example.com/tags/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7I-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E3%80%8B/"/>
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>441. 排列硬币</title>
    <link href="http://example.com/2021/06/04/LeetCode/441.%20%E6%8E%92%E5%88%97%E7%A1%AC%E5%B8%81/"/>
    <id>http://example.com/2021/06/04/LeetCode/441.%20%E6%8E%92%E5%88%97%E7%A1%AC%E5%B8%81/</id>
    <published>2021-06-04T00:47:00.000Z</published>
    <updated>2021-06-04T00:48:38.865Z</updated>
    
    <content type="html"><![CDATA[<h1 id="官方链接"><a href="#官方链接" class="headerlink" title="官方链接"></a>官方链接</h1><ul><li><a href="https://leetcode-cn.com/problems/arranging-coins">题目</a></li></ul><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>你总共有 n 枚硬币，你需要将它们摆成一个阶梯形状，第 k 行就必须正好有 k 枚硬币。</p><p>给定一个数字 n，找出可形成完整阶梯行的总行数。</p><p>n 是一个非负整数，并且在32位有符号整型的范围内。<a id="more"></a></p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n &#x3D; 5</span><br><span class="line"></span><br><span class="line">硬币可排列成以下几行:</span><br><span class="line">¤</span><br><span class="line">¤ ¤</span><br><span class="line">¤ ¤</span><br><span class="line"></span><br><span class="line">因为第三行不完整，所以返回2.</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">n &#x3D; 8</span><br><span class="line"></span><br><span class="line">硬币可排列成以下几行:</span><br><span class="line">¤</span><br><span class="line">¤ ¤</span><br><span class="line">¤ ¤ ¤</span><br><span class="line">¤ ¤</span><br><span class="line"></span><br><span class="line">因为第四行不完整，所以返回3.</span><br></pre></td></tr></table></figure><h1 id="方法一：数学"><a href="#方法一：数学" class="headerlink" title="方法一：数学"></a>方法一：数学</h1><ul><li><p>设最后返回的阶梯行数为$k$，硬币的总数为$n$，则应该满足如下不等式：</p><script type="math/tex; mode=display">1+2+3+\cdots+k \le n,</script><p>即</p><script type="math/tex; mode=display">\frac{k(k+1)}{2} \le n\\\Rightarrow k^2+k - 2n \le 0 \\\Rightarrow k < \frac{-1 + \sqrt{1+8n}}{2}</script></li><li><p>Java代码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">arrangeCoins</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 推导得到，为了不溢出，Math.sqrt(1.0 + 8.0 * n)</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)((-<span class="number">1.0</span> + Math.sqrt(<span class="number">1.0</span> + <span class="number">8.0</span> * n)) / <span class="number">2.0</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="方法二：二分查找"><a href="#方法二：二分查找" class="headerlink" title="方法二：二分查找"></a>方法二：二分查找</h1><ul><li>可以用二分查找的方法来解决这个问题。</li><li>Java代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">arrangeCoins</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 二分查找</span></span><br><span class="line">        <span class="keyword">long</span> left = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">long</span> right = n;</span><br><span class="line">        <span class="keyword">long</span> mid = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right - <span class="number">1</span>) &#123;</span><br><span class="line">            mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            System.out.println(mid);</span><br><span class="line">            <span class="keyword">if</span> (((mid * (mid + <span class="number">1</span>)) / <span class="number">2</span>) == n) &#123;</span><br><span class="line">                left = mid;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (((mid * (mid + <span class="number">1</span>)) / <span class="number">2</span>) &gt; n) &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;官方链接&quot;&gt;&lt;a href=&quot;#官方链接&quot; class=&quot;headerlink&quot; title=&quot;官方链接&quot;&gt;&lt;/a&gt;官方链接&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/arranging-coins&quot;&gt;题目&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;你总共有 n 枚硬币，你需要将它们摆成一个阶梯形状，第 k 行就必须正好有 k 枚硬币。&lt;/p&gt;
&lt;p&gt;给定一个数字 n，找出可形成完整阶梯行的总行数。&lt;/p&gt;
&lt;p&gt;n 是一个非负整数，并且在32位有符号整型的范围内。</summary>
    
    
    
    <category term="LeetCode" scheme="http://example.com/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
    <category term="LeetCode简单" scheme="http://example.com/tags/LeetCode%E7%AE%80%E5%8D%95/"/>
    
    <category term="二分查找" scheme="http://example.com/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
    <category term="数学" scheme="http://example.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>645. 错误的集合</title>
    <link href="http://example.com/2021/06/03/LeetCode/645.%20%E9%94%99%E8%AF%AF%E7%9A%84%E9%9B%86%E5%90%88/"/>
    <id>http://example.com/2021/06/03/LeetCode/645.%20%E9%94%99%E8%AF%AF%E7%9A%84%E9%9B%86%E5%90%88/</id>
    <published>2021-06-03T12:45:00.000Z</published>
    <updated>2021-06-03T12:45:19.404Z</updated>
    
    <content type="html"><![CDATA[<h1 id="官方链接"><a href="#官方链接" class="headerlink" title="官方链接"></a>官方链接</h1><ul><li><a href="https://leetcode-cn.com/problems/set-mismatch">题目</a></li><li><a href="https://leetcode-cn.com/problems/set-mismatch/solution/cuo-wu-de-ji-he-by-leetcode/">官方题解</a></li></ul><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>集合<code>s</code>包含从<code>1</code>到<code>n</code>的整数。不幸的是，因为数据错误，导致集合里面某一个数字复制了成了集合里面的另外一个数字的值，导致集合<strong>丢失了一个数字</strong>并且<strong>有一个数字重复</strong>。</p><p>给定一个数组<code>nums</code>代表了集合<code>S</code>发生错误后的结果。</p><p>请你找出重复出现的整数，再找到丢失的整数，将它们以数组的形式返回。<a id="more"></a></p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [1,2,2,4]</span><br><span class="line">输出：[2,3]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [1,1]</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>2 $\le$ nums.length $\le 10^4$</li><li>1 &lt;= nums[i] &lt;= $10^4$</li></ul><h1 id="题解思路"><a href="#题解思路" class="headerlink" title="题解思路"></a>题解思路</h1><ul><li>设重复出现的整数为$x$，丢失的整数为$y$，有<script type="math/tex; mode=display">1+2+ \cdots +x+ \cdots +y+\cdots+n=\frac{n(n+1)}{2} \\1+2+ \cdots +x+ \cdots +x+\cdots+n=S. \\</script>将上述两个式子相减可以得到<script type="math/tex; mode=display">y=\frac{n(n+1)}{2}-S+x.</script></li><li>下面考虑如何求出重复的数字$x$，可以将<code>nums[]</code>数组排序，如果相邻两个元素之差为0，则找到了重复的数字$x$.</li><li>根据上面的想法，Java代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] findErrorNums(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">int</span>[] ans = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> s = <span class="number">0</span>; <span class="comment">// 计算数组sum[]的元素之和</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            s += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Arrays.sort(nums); <span class="comment">// 给数组nums[]排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((nums[i + <span class="number">1</span>] - nums[i]) == <span class="number">0</span>) &#123;</span><br><span class="line">                ans[<span class="number">0</span>] = nums[i]; <span class="comment">// 重复的数字</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ans[<span class="number">1</span>] = n * (n + <span class="number">1</span>) / <span class="number">2</span> - s + ans[<span class="number">0</span>]; <span class="comment">// 计算丢失的整数</span></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;官方链接&quot;&gt;&lt;a href=&quot;#官方链接&quot; class=&quot;headerlink&quot; title=&quot;官方链接&quot;&gt;&lt;/a&gt;官方链接&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/set-mismatch&quot;&gt;题目&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/set-mismatch/solution/cuo-wu-de-ji-he-by-leetcode/&quot;&gt;官方题解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;集合&lt;code&gt;s&lt;/code&gt;包含从&lt;code&gt;1&lt;/code&gt;到&lt;code&gt;n&lt;/code&gt;的整数。不幸的是，因为数据错误，导致集合里面某一个数字复制了成了集合里面的另外一个数字的值，导致集合&lt;strong&gt;丢失了一个数字&lt;/strong&gt;并且&lt;strong&gt;有一个数字重复&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;给定一个数组&lt;code&gt;nums&lt;/code&gt;代表了集合&lt;code&gt;S&lt;/code&gt;发生错误后的结果。&lt;/p&gt;
&lt;p&gt;请你找出重复出现的整数，再找到丢失的整数，将它们以数组的形式返回。</summary>
    
    
    
    <category term="LeetCode" scheme="http://example.com/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
    <category term="哈希表" scheme="http://example.com/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
    <category term="LeetCode简单" scheme="http://example.com/tags/LeetCode%E7%AE%80%E5%8D%95/"/>
    
    <category term="数学" scheme="http://example.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>1744.你能在你最喜欢的那天吃到你最喜欢的糖果吗？</title>
    <link href="http://example.com/2021/06/01/LeetCode/1744.%E4%BD%A0%E8%83%BD%E5%9C%A8%E4%BD%A0%E6%9C%80%E5%96%9C%E6%AC%A2%E7%9A%84%E9%82%A3%E5%A4%A9%E5%90%83%E5%88%B0%E4%BD%A0%E6%9C%80%E5%96%9C%E6%AC%A2%E7%9A%84%E7%B3%96%E6%9E%9C%E5%90%97%EF%BC%9F/"/>
    <id>http://example.com/2021/06/01/LeetCode/1744.%E4%BD%A0%E8%83%BD%E5%9C%A8%E4%BD%A0%E6%9C%80%E5%96%9C%E6%AC%A2%E7%9A%84%E9%82%A3%E5%A4%A9%E5%90%83%E5%88%B0%E4%BD%A0%E6%9C%80%E5%96%9C%E6%AC%A2%E7%9A%84%E7%B3%96%E6%9E%9C%E5%90%97%EF%BC%9F/</id>
    <published>2021-06-01T05:53:00.000Z</published>
    <updated>2021-06-01T05:58:14.069Z</updated>
    
    <content type="html"><![CDATA[<h1 id="官方链接"><a href="#官方链接" class="headerlink" title="官方链接"></a>官方链接</h1><ul><li><a href="https://leetcode-cn.com/problems/can-you-eat-your-favorite-candy-on-your-favorite-day">题目</a></li><li><a href="https://leetcode-cn.com/problems/can-you-eat-your-favorite-candy-on-your-favorite-day/solution/ni-neng-zai-ni-zui-xi-huan-de-na-tian-ch-boa0/">官方题解</a></li></ul><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个下标从<code>0</code>开始的正整数数组<code>candiesCount</code>，其中<code>candiesCount[i]</code>表示你拥有的第<code>i</code>类糖果的数目。同时给你一个二维数组<code>queries</code>，其中<code>queries[i] = [favoriteTypei, favoriteDayi, dailyCapi]</code>。</p><p>你按照如下规则进行一场游戏：</p><ul><li>你从第<code>0</code>天开始吃糖果。</li><li>你在吃完<strong>所有</strong>第<code>i - 1</code>类糖果之前，<strong>不能</strong>吃任何一颗第<code>i</code>类糖果。  </li><li>在吃完所有糖果之前，你必须每天<strong>至少</strong>吃<strong>一颗</strong>糖果。<a id="more"></a> </li></ul><p>请你构建一个布尔型数组 <code>answer</code> ，满足 <code>answer.length == queries.length</code>。<code>answer[i]</code>为 true 的条件是：在每天吃 <strong>不超过</strong> <code>dailyCapi</code> 颗糖果的前提下，你可以在第 <code>favoriteDayi</code> 天吃到第 <code>favoriteTypei</code> 类糖果；否则 <code>answer[i]</code> 为 <code>false</code> 。注意，只要满足上面 3 条规则中的第二条规则，你就可以在同一天吃不同类型的糖果。</p><p>请你返回得到的数组 <code>answer</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：candiesCount &#x3D; [7,4,5,3,8], queries &#x3D; [[0,2,2],[4,2,4],[2,13,1000000000]]</span><br><span class="line">输出：[true,false,true]</span><br><span class="line">提示：</span><br><span class="line">1- 在第 0 天吃 2 颗糖果(类型 0），第 1 天吃 2 颗糖果（类型 0），第 2 天你可以吃到类型 0 的糖果。</span><br><span class="line">2- 每天你最多吃 4 颗糖果。即使第 0 天吃 4 颗糖果（类型 0），第 1 天吃 4 颗糖果（类型 0 和类型 1），你也没办法在第 2 天吃到类型 4 的糖果。换言之，你没法在每天吃 4 颗糖果的限制下在第 2 天吃到第 4 类糖果。</span><br><span class="line">3- 如果你每天吃 1 颗糖果，你可以在第 13 天吃到类型 2 的糖果。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：candiesCount &#x3D; [5,2,6,4,1], queries &#x3D; [[3,1,2],[4,10,3],[3,10,100],[4,100,30],[1,3,1]]</span><br><span class="line">输出：[false,true,true,false,false]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>1 &lt;= candiesCount.length &lt;= $10^5$</li><li>1 &lt;= candiesCount[i] &lt;= $10^5$</li><li>1 &lt;= queries.length &lt;= $10^5$</li><li>queries[i].length == 3</li><li>0 &lt;= favoriteTypei &lt; candiesCount.length</li><li>0 &lt;= favoriteDayi &lt;= $10^9$</li><li>1 &lt;= dailyCapi &lt;= $10^9$</li></ul><h1 id="题解思路"><a href="#题解思路" class="headerlink" title="题解思路"></a>题解思路</h1><ul><li>可以参考<a href="https://leetcode-cn.com/problems/can-you-eat-your-favorite-candy-on-your-favorite-day/solution/ni-neng-zai-ni-zui-xi-huan-de-na-tian-ch-boa0/">官方题解</a>，重要的是如何推导出交集。</li><li>Java代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span>[] canEat(<span class="keyword">int</span>[] candiesCount, <span class="keyword">int</span>[][] queries) &#123;</span><br><span class="line">        <span class="keyword">int</span> m = candiesCount.length;</span><br><span class="line">        <span class="keyword">int</span> n = queries.length;</span><br><span class="line">        <span class="keyword">boolean</span>[] ans = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line">        <span class="keyword">long</span>[] sum = <span class="keyword">new</span> <span class="keyword">long</span>[m];</span><br><span class="line">        sum[<span class="number">0</span>] = candiesCount[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            sum[i] = candiesCount[i] + sum[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">            <span class="keyword">int</span> type = queries[k][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> day = queries[k][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> cap = queries[k][<span class="number">2</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">long</span> x1 = day + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">long</span> x2 = (<span class="keyword">long</span>)(day + <span class="number">1</span>) * cap;</span><br><span class="line">            <span class="keyword">long</span> y1 = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (type &gt; <span class="number">0</span>) y1 = sum[type - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">long</span> y2 = sum[type];</span><br><span class="line"></span><br><span class="line">            ans[k] = !(x2 &lt; y1 || y2 &lt; x1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意：这里<code>x1</code>,<code>x2</code>,<code>y1</code>,<code>y2</code>,<code>sum[]</code>都要设置成<code>long</code>类型，否则会有测试无法通过。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;官方链接&quot;&gt;&lt;a href=&quot;#官方链接&quot; class=&quot;headerlink&quot; title=&quot;官方链接&quot;&gt;&lt;/a&gt;官方链接&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/can-you-eat-your-favorite-candy-on-your-favorite-day&quot;&gt;题目&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/can-you-eat-your-favorite-candy-on-your-favorite-day/solution/ni-neng-zai-ni-zui-xi-huan-de-na-tian-ch-boa0/&quot;&gt;官方题解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;给你一个下标从&lt;code&gt;0&lt;/code&gt;开始的正整数数组&lt;code&gt;candiesCount&lt;/code&gt;，其中&lt;code&gt;candiesCount[i]&lt;/code&gt;表示你拥有的第&lt;code&gt;i&lt;/code&gt;类糖果的数目。同时给你一个二维数组&lt;code&gt;queries&lt;/code&gt;，其中&lt;code&gt;queries[i] = [favoriteTypei, favoriteDayi, dailyCapi]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;你按照如下规则进行一场游戏：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你从第&lt;code&gt;0&lt;/code&gt;天开始吃糖果。&lt;/li&gt;
&lt;li&gt;你在吃完&lt;strong&gt;所有&lt;/strong&gt;第&lt;code&gt;i - 1&lt;/code&gt;类糖果之前，&lt;strong&gt;不能&lt;/strong&gt;吃任何一颗第&lt;code&gt;i&lt;/code&gt;类糖果。  &lt;/li&gt;
&lt;li&gt;在吃完所有糖果之前，你必须每天&lt;strong&gt;至少&lt;/strong&gt;吃&lt;strong&gt;一颗&lt;/strong&gt;糖果。</summary>
    
    
    
    <category term="LeetCode" scheme="http://example.com/categories/LeetCode/"/>
    
    
    <category term="LeetCode中等" scheme="http://example.com/tags/LeetCode%E4%B8%AD%E7%AD%89/"/>
    
    <category term="数学" scheme="http://example.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>201. 数字范围按位与</title>
    <link href="http://example.com/2021/05/31/LeetCode/201.%20%E6%95%B0%E5%AD%97%E8%8C%83%E5%9B%B4%E6%8C%89%E4%BD%8D%E4%B8%8E/"/>
    <id>http://example.com/2021/05/31/LeetCode/201.%20%E6%95%B0%E5%AD%97%E8%8C%83%E5%9B%B4%E6%8C%89%E4%BD%8D%E4%B8%8E/</id>
    <published>2021-05-31T10:55:00.000Z</published>
    <updated>2021-06-01T05:55:41.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><a href="https://leetcode-cn.com/problems/bitwise-and-of-numbers-range">题目</a>：<br>给你两个整数<code>left</code>和<code>right</code>，表示区间<code>[left, right]</code>，返回此区间内所有数字<strong>按位与</strong>的结果（包含<code>left</code>、<code>right</code>端点）。<a id="more"></a></p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：left &#x3D; 5, right &#x3D; 7</span><br><span class="line">输出：4</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：left &#x3D; 0, right &#x3D; 0</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：left &#x3D; 1, right &#x3D; 2147483647</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><p>0 &lt;= left &lt;= right &lt;= $2^{31} - 1$</p><h1 id="题解思路"><a href="#题解思路" class="headerlink" title="题解思路"></a>题解思路</h1><ul><li>参考<a href="">官方解答</a>。</li><li>这道题可以转换为找<code>left</code>和<code>right</code>对应二进制的公共前缀，因为在<code>(left,right)</code>之间的数中，公共前缀后的二进制位中肯定含有0，因此按位与后一定为0.</li><li><strong>Java代码</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rangeBitwiseAnd</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> shift = <span class="number">0</span>; <span class="comment">// 记录移位次数</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            left &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            right &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            shift++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left &lt;&lt; shift;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：$O(\log n)$</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/bitwise-and-of-numbers-range&quot;&gt;题目&lt;/a&gt;：&lt;br&gt;给你两个整数&lt;code&gt;left&lt;/code&gt;和&lt;code&gt;right&lt;/code&gt;，表示区间&lt;code&gt;[left, right]&lt;/code&gt;，返回此区间内所有数字&lt;strong&gt;按位与&lt;/strong&gt;的结果（包含&lt;code&gt;left&lt;/code&gt;、&lt;code&gt;right&lt;/code&gt;端点）。</summary>
    
    
    
    <category term="LeetCode" scheme="http://example.com/categories/LeetCode/"/>
    
    
    <category term="LeetCode中等" scheme="http://example.com/tags/LeetCode%E4%B8%AD%E7%AD%89/"/>
    
    <category term="位运算" scheme="http://example.com/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>231.2的幂</title>
    <link href="http://example.com/2021/05/30/LeetCode/231.2%E7%9A%84%E5%B9%82/"/>
    <id>http://example.com/2021/05/30/LeetCode/231.2%E7%9A%84%E5%B9%82/</id>
    <published>2021-05-30T14:24:00.000Z</published>
    <updated>2021-05-30T14:34:39.616Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><a href="https://leetcode-cn.com/problems/power-of-two">2的幂</a>：<br>给你一个整数 <code>n</code>，请你判断该整数是否是<code>2</code>的幂次方。如果是，返回 <code>true</code>；否则，返回<code>false</code>。</p><p>如果存在一个整数<code>x</code>使得$n == 2^x$，则认为<code>n</code>是<code>2</code>的幂次方。<a id="more"></a></p><p><strong>示例 1：</strong></p><p>输入：n = 1<br>输出：true<br>解释：$2^0 = 1$</p><p><strong>示例 2：</strong></p><p>输入：n = 16<br>输出：true<br>解释：$2^4 = 16$  </p><p><strong>示例 3：</strong></p><p>输入：n = 3<br>输出：false  </p><p><strong>示例 4：</strong></p><p>输入：n = 4<br>输出：true  </p><p><strong>示例 5：</strong></p><p>输入：n = 5<br>输出：false  </p><p><strong>提示：</strong></p><p>$-2^{31} &lt;= n &lt;= 2^{31} - 1$</p><h1 id="二进制表示中最低位"><a href="#二进制表示中最低位" class="headerlink" title="二进制表示中最低位"></a>二进制表示中最低位</h1><ul><li>具体可参看<a href="">官方解答</a>，有以下两种方式：</li><li>(1) <code>n &amp; (n -1)</code></li><li>(2）<code>n &amp; (-n)</code></li><li><p>注意此题中，如果<code>n&lt;0</code>，返回false。</p></li><li><p>计算n的二进制中有多少个1，如果只有1个1，则返回true。Java代码如下：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (((n &gt;&gt; i) &amp; <span class="number">1</span>) == <span class="number">1</span>) count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>n &amp; (n -1)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (n &gt; <span class="number">0</span>) &amp;&amp; ((n &amp; (n - <span class="number">1</span>)) == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>n &amp; (-n)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((n &gt; <span class="number">0</span>) &amp;&amp; (n &amp; (n - <span class="number">1</span>)));   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/power-of-two&quot;&gt;2的幂&lt;/a&gt;：&lt;br&gt;给你一个整数 &lt;code&gt;n&lt;/code&gt;，请你判断该整数是否是&lt;code&gt;2&lt;/code&gt;的幂次方。如果是，返回 &lt;code&gt;true&lt;/code&gt;；否则，返回&lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果存在一个整数&lt;code&gt;x&lt;/code&gt;使得$n == 2^x$，则认为&lt;code&gt;n&lt;/code&gt;是&lt;code&gt;2&lt;/code&gt;的幂次方。</summary>
    
    
    
    <category term="LeetCode" scheme="http://example.com/categories/LeetCode/"/>
    
    
    <category term="LeetCode简单" scheme="http://example.com/tags/LeetCode%E7%AE%80%E5%8D%95/"/>
    
    <category term="数学" scheme="http://example.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="位运算" scheme="http://example.com/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>78.子集</title>
    <link href="http://example.com/2021/05/29/LeetCode/78.%E5%AD%90%E9%9B%86/"/>
    <id>http://example.com/2021/05/29/LeetCode/78.%E5%AD%90%E9%9B%86/</id>
    <published>2021-05-29T08:02:00.000Z</published>
    <updated>2021-05-29T08:05:00.301Z</updated>
    
    <content type="html"><![CDATA[<h1 id="官方链接"><a href="#官方链接" class="headerlink" title="官方链接"></a>官方链接</h1><ul><li><a href="https://leetcode-cn.com/problems/subsets/">题目</a></li><li><a href="https://leetcode-cn.com/problems/subsets/solution/zi-ji-by-leetcode-solution/">官方解答</a></li></ul><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个整数数组<code>nums</code>，数组中的元素<strong>互不相同</strong>。返回该数组所有可能的子集（幂集）。</p><p>解集<strong>不能</strong>包含重复的子集。你可以按<strong>任意顺序</strong>返回解集。<a id="more"></a></p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [1,2,3]</span><br><span class="line">输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [0]</span><br><span class="line">输出：[[],[0]]</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li><code>1 &lt;= nums.length &lt;= 10</code></li><li><code>-10 &lt;= nums[i] &lt;= 10</code></li><li><code>nums</code>中的所有元素<strong>互不相同</strong></li></ul><h1 id="题解思路"><a href="#题解思路" class="headerlink" title="题解思路"></a>题解思路</h1><ul><li>如果<code>nums</code>的长度为$n$，则它的幂集共有$2^n-1$个。如果要求数组<code>nums = [1,2,3]</code>的所有幂集，可以用一个三位的二进制来表示，每一个二进制位表示第$i$位数是否在幂集中，如011，表示的幂集就是<code>[2,3]</code>，当枚举出$n$位二进制后，就求出了所有的幂集。</li><li>Java代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; tempt = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(); <span class="comment">// 每次增加的子集</span></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;(); <span class="comment">// 结果返回子集</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length; <span class="comment">// 数组的长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> mask = <span class="number">0</span>; mask &lt; Math.pow(<span class="number">2</span>, n); mask++) &#123;</span><br><span class="line">            tempt.clear();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((mask &amp; (<span class="number">1</span> &lt;&lt; i)) != <span class="number">0</span>) tempt.add(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            ans.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(tempt));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>复杂度分析<ul><li>时间复杂度：$O(n \times 2^n)$</li><li>空间复杂度：$O(n)$</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;官方链接&quot;&gt;&lt;a href=&quot;#官方链接&quot; class=&quot;headerlink&quot; title=&quot;官方链接&quot;&gt;&lt;/a&gt;官方链接&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/subsets/&quot;&gt;题目&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/subsets/solution/zi-ji-by-leetcode-solution/&quot;&gt;官方解答&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;给你一个整数数组&lt;code&gt;nums&lt;/code&gt;，数组中的元素&lt;strong&gt;互不相同&lt;/strong&gt;。返回该数组所有可能的子集（幂集）。&lt;/p&gt;
&lt;p&gt;解集&lt;strong&gt;不能&lt;/strong&gt;包含重复的子集。你可以按&lt;strong&gt;任意顺序&lt;/strong&gt;返回解集。</summary>
    
    
    
    <category term="LeetCode" scheme="http://example.com/categories/LeetCode/"/>
    
    
    <category term="数组" scheme="http://example.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="LeetCode中等" scheme="http://example.com/tags/LeetCode%E4%B8%AD%E7%AD%89/"/>
    
    <category term="位运算" scheme="http://example.com/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
    <category term="回溯算法" scheme="http://example.com/tags/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>477. 汉明距离总和</title>
    <link href="http://example.com/2021/05/28/LeetCode/477.%20%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB%E6%80%BB%E5%92%8C/"/>
    <id>http://example.com/2021/05/28/LeetCode/477.%20%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB%E6%80%BB%E5%92%8C/</id>
    <published>2021-05-28T15:42:00.000Z</published>
    <updated>2021-05-28T15:43:24.862Z</updated>
    
    <content type="html"><![CDATA[<h1 id="官方链接"><a href="#官方链接" class="headerlink" title="官方链接"></a>官方链接</h1><ul><li><a href="https://leetcode-cn.com/problems/total-hamming-distance/">题目</a></li><li><a href="https://leetcode-cn.com/problems/total-hamming-distance/solution/yi-ming-ju-chi-zong-he-by-leetcode-solut-t0ev/">官方题解</a></li></ul><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>两个整数的 汉明距离 指的是这两个数字的二进制数对应位不同的数量。  </p><p>计算一个数组中，任意两个数之间汉明距离的总和。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入: 4, 14, 2</span><br><span class="line"></span><br><span class="line">输出: 6</span><br><span class="line"></span><br><span class="line">解释: 在二进制表示中，4表示为0100，14表示为1110，2表示为0010。（这样表示是为了体现后四位之间关系）</span><br><span class="line">所以答案为：</span><br><span class="line">HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) &#x3D; 2 + 2 + 2 &#x3D; 6.</span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><ul><li>数组中元素的范围为从<code>0</code>到 $10^9$。</li><li>数组的长度不超过$10^4$。<a id="more"></a></li></ul><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><ul><li>可以计算数组中每个数的二进制数中的第$i$位总共有多少个1，如果第$i$为有$c$个1，则第$i$位的汉明距离为$c \times (n - c)$，最后一次遍历位的二进制数即可。</li><li>Java代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">totalHammingDistance</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> value : nums) &#123;</span><br><span class="line">                c += (value &gt;&gt; i) &amp; <span class="number">1</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            ans += c * (n - c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;官方链接&quot;&gt;&lt;a href=&quot;#官方链接&quot; class=&quot;headerlink&quot; title=&quot;官方链接&quot;&gt;&lt;/a&gt;官方链接&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/total-hamming-distance/&quot;&gt;题目&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/total-hamming-distance/solution/yi-ming-ju-chi-zong-he-by-leetcode-solut-t0ev/&quot;&gt;官方题解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;两个整数的 汉明距离 指的是这两个数字的二进制数对应位不同的数量。  &lt;/p&gt;
&lt;p&gt;计算一个数组中，任意两个数之间汉明距离的总和。&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入: 4, 14, 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: 6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释: 在二进制表示中，4表示为0100，14表示为1110，2表示为0010。（这样表示是为了体现后四位之间关系）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;所以答案为：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) &amp;#x3D; 2 + 2 + 2 &amp;#x3D; 6.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数组中元素的范围为从&lt;code&gt;0&lt;/code&gt;到 $10^9$。&lt;/li&gt;
&lt;li&gt;数组的长度不超过$10^4$。</summary>
    
    
    
    <category term="LeetCode" scheme="http://example.com/categories/LeetCode/"/>
    
    
    <category term="LeetCode中等" scheme="http://example.com/tags/LeetCode%E4%B8%AD%E7%AD%89/"/>
    
    <category term="位运算" scheme="http://example.com/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>461.汉明距离</title>
    <link href="http://example.com/2021/05/27/LeetCode/461.%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/"/>
    <id>http://example.com/2021/05/27/LeetCode/461.%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/</id>
    <published>2021-05-27T09:01:00.000Z</published>
    <updated>2021-05-27T09:04:52.180Z</updated>
    
    <content type="html"><![CDATA[<h1 id="官方链接"><a href="#官方链接" class="headerlink" title="官方链接"></a>官方链接</h1><ul><li><a href="https://leetcode-cn.com/problems/hamming-distance/">题目</a></li></ul><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>两个整数之间的汉明距离指的是这两个数字对应二进制位不同的位置的数目。</p><p>给出两个整数<code>x</code>和<code>y</code>，计算它们之间的汉明距离。</p><p>注意：<br>$0 ≤ x, y &lt; 2^{31}.$</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: x &#x3D; 1, y &#x3D; 4</span><br><span class="line">输出: 2</span><br><span class="line">解释:</span><br><span class="line">1   (0 0 0 1)</span><br><span class="line">4   (0 1 0 0)</span><br><span class="line">       ↑   ↑</span><br></pre></td></tr></table></figure><p>上面的箭头指出了对应二进制位不同的位置。<a id="more"></a></p><h1 id="题解思路"><a href="#题解思路" class="headerlink" title="题解思路"></a>题解思路</h1><p>对于异或运算，相同为0，不同为1.先计算$z=x \oplus y$，接着计算$z$中1的个数。<br>首先让$z$与1进行与运算，如果结果为1，则说明低位是1，计数器加一。接着将$z$右移，高位补充为0，继续判断低位是不是1，直到$z$最后为0，结束这个过程。</p><p><strong>Java代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> z = x ^ y;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 计算x^y后得到的z的二进制位中有多少个1</span></span><br><span class="line">        <span class="keyword">while</span> (z &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((z &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">                ans ++;</span><br><span class="line">            &#125;</span><br><span class="line">            z &gt;&gt;= <span class="number">1</span>; <span class="comment">// 右移</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="补充资料"><a href="#补充资料" class="headerlink" title="补充资料"></a>补充资料</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/30108890">Java中的移位运算</a></li><li><a href="https://www.cnblogs.com/graphics/archive/2010/06/21/1752421.html">算法-求二进制中1的个数</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;官方链接&quot;&gt;&lt;a href=&quot;#官方链接&quot; class=&quot;headerlink&quot; title=&quot;官方链接&quot;&gt;&lt;/a&gt;官方链接&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/hamming-distance/&quot;&gt;题目&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;两个整数之间的汉明距离指的是这两个数字对应二进制位不同的位置的数目。&lt;/p&gt;
&lt;p&gt;给出两个整数&lt;code&gt;x&lt;/code&gt;和&lt;code&gt;y&lt;/code&gt;，计算它们之间的汉明距离。&lt;/p&gt;
&lt;p&gt;注意：&lt;br&gt;$0 ≤ x, y &amp;lt; 2^{31}.$&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入: x &amp;#x3D; 1, y &amp;#x3D; 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1   (0 0 0 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4   (0 1 0 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       ↑   ↑&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的箭头指出了对应二进制位不同的位置。</summary>
    
    
    
    <category term="LeetCode" scheme="http://example.com/categories/LeetCode/"/>
    
    
    <category term="LeetCode简单" scheme="http://example.com/tags/LeetCode%E7%AE%80%E5%8D%95/"/>
    
    <category term="位运算" scheme="http://example.com/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>1277.统计全为1的正方形子矩阵</title>
    <link href="http://example.com/2021/05/25/LeetCode/1277.%E7%BB%9F%E8%AE%A1%E5%85%A8%E4%B8%BA1%E7%9A%84%E6%AD%A3%E6%96%B9%E5%BD%A2%E5%AD%90%E7%9F%A9%E9%98%B5/"/>
    <id>http://example.com/2021/05/25/LeetCode/1277.%E7%BB%9F%E8%AE%A1%E5%85%A8%E4%B8%BA1%E7%9A%84%E6%AD%A3%E6%96%B9%E5%BD%A2%E5%AD%90%E7%9F%A9%E9%98%B5/</id>
    <published>2021-05-25T03:35:00.000Z</published>
    <updated>2021-05-25T03:38:28.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="官方链接"><a href="#官方链接" class="headerlink" title="官方链接"></a>官方链接</h1><ul><li><a href="https://leetcode-cn.com/problems/count-square-submatrices-with-all-ones/">题目</a></li><li><a href="https://leetcode-cn.com/problems/count-square-submatrices-with-all-ones/solution/tong-ji-quan-wei-1-de-zheng-fang-xing-zi-ju-zhen-2/">官方题解</a></li></ul><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给你一个<code>m * n</code>的矩阵，矩阵中的元素不是<code>0</code>就是<code>1</code>，请你统计并返回其中完全由<code>1</code>组成的<strong>正方形</strong>子矩阵的个数。<a id="more"></a></p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix &#x3D;</span><br><span class="line">[</span><br><span class="line">  [0,1,1,1],</span><br><span class="line">  [1,1,1,1],</span><br><span class="line">  [0,1,1,1]</span><br><span class="line">]</span><br><span class="line">输出：15</span><br><span class="line">解释： </span><br><span class="line">边长为 1 的正方形有 10 个。</span><br><span class="line">边长为 2 的正方形有 4 个。</span><br><span class="line">边长为 3 的正方形有 1 个。</span><br><span class="line">正方形的总数 &#x3D; 10 + 4 + 1 &#x3D; 15.</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix &#x3D; </span><br><span class="line">[</span><br><span class="line">  [1,0,1],</span><br><span class="line">  [1,1,0],</span><br><span class="line">  [1,1,0]</span><br><span class="line">]</span><br><span class="line">输出：7</span><br><span class="line">解释：</span><br><span class="line">边长为 1 的正方形有 6 个。 </span><br><span class="line">边长为 2 的正方形有 1 个。</span><br><span class="line">正方形的总数 &#x3D; 6 + 1 &#x3D; 7.</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= arr.length &lt;= 300</code></li><li><code>1 &lt;= arr[0].length &lt;= 300</code></li><li><code>0 &lt;= arr[i][j] &lt;= 1</code></li></ul><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p>用<code>dp[i][j]</code>代表以<code>(i,j)</code>元为右下角的所有正方形中全为1的正方形个数之和。递推式参考<a href="">官方题解</a>。</p><p>Java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countSquares</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = matrix[i][<span class="number">0</span>];</span><br><span class="line">            ans += dp[i][<span class="number">0</span>];</span><br><span class="line">            <span class="comment">// System.out.printf(&quot;ans[%d,0]=%d\n&quot;,i,dp[i][0]);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = matrix[<span class="number">0</span>][j];</span><br><span class="line">            ans += dp[<span class="number">0</span>][j];</span><br><span class="line">            <span class="comment">// System.out.printf(&quot;ans[0,%d]=%d\n&quot;,j,dp[0][j]);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    dp[i][j] = Math.min(dp[i-<span class="number">1</span>][j], Math.min(dp[i-<span class="number">1</span>][j-<span class="number">1</span>], dp[i][j-<span class="number">1</span>])) + <span class="number">1</span>;</span><br><span class="line">                    ans += dp[i][j];</span><br><span class="line">                    <span class="comment">// System.out.printf(&quot;ans[%d,%d]=%d\n&quot;,i,j,dp[i][j]);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;官方链接&quot;&gt;&lt;a href=&quot;#官方链接&quot; class=&quot;headerlink&quot; title=&quot;官方链接&quot;&gt;&lt;/a&gt;官方链接&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/count-square-submatrices-with-all-ones/&quot;&gt;题目&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/count-square-submatrices-with-all-ones/solution/tong-ji-quan-wei-1-de-zheng-fang-xing-zi-ju-zhen-2/&quot;&gt;官方题解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;给你一个&lt;code&gt;m * n&lt;/code&gt;的矩阵，矩阵中的元素不是&lt;code&gt;0&lt;/code&gt;就是&lt;code&gt;1&lt;/code&gt;，请你统计并返回其中完全由&lt;code&gt;1&lt;/code&gt;组成的&lt;strong&gt;正方形&lt;/strong&gt;子矩阵的个数。</summary>
    
    
    
    <category term="LeetCode" scheme="http://example.com/categories/LeetCode/"/>
    
    
    <category term="数组" scheme="http://example.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="LeetCode中等" scheme="http://example.com/tags/LeetCode%E4%B8%AD%E7%AD%89/"/>
    
    <category term="动态规划" scheme="http://example.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>数值求解热传导方程</title>
    <link href="http://example.com/2021/05/24/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3/%E6%95%B0%E5%80%BC%E6%B1%82%E8%A7%A3%E7%83%AD%E4%BC%A0%E5%AF%BC%E6%96%B9%E7%A8%8B/%E6%95%B0%E5%80%BC%E6%B1%82%E8%A7%A3%E7%83%AD%E4%BC%A0%E5%AF%BC%E6%96%B9%E7%A8%8B/"/>
    <id>http://example.com/2021/05/24/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3/%E6%95%B0%E5%80%BC%E6%B1%82%E8%A7%A3%E7%83%AD%E4%BC%A0%E5%AF%BC%E6%96%B9%E7%A8%8B/%E6%95%B0%E5%80%BC%E6%B1%82%E8%A7%A3%E7%83%AD%E4%BC%A0%E5%AF%BC%E6%96%B9%E7%A8%8B/</id>
    <published>2021-05-24T05:59:00.000Z</published>
    <updated>2021-05-24T06:13:56.664Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最简显格式"><a href="#最简显格式" class="headerlink" title="最简显格式"></a>最简显格式</h1><p>对于如下热传导方程：</p><script type="math/tex; mode=display">    \begin{cases}        \frac{\partial u}{\partial t} =\frac{\partial ^2 u}{\partial t}  \quad 0<t<0.03,0<x<1 \\          u(x,0)=\sin(4\pi x) \quad 0 \le x \le 1 \\        u(0,t)  = 0 \quad  0 \le t \le 0.03 \\        u(1,t)  = 0 \quad 0 \le t \le 0.03    \end{cases}</script><p>该方程的精确解为$u(t,x)=e^{-(4\pi)^2t}\sin (4 \pi x),0\le t \le 0.03, 0 \le x \le 1.$</p><p>首先对时间及空间进行划分，将时间划分为$m-1$份，将空间划分为$n-1$份，则$\tau=\frac{0.03}{m-1},h=\frac{1}{n-1}$。<br>根据最简显格式可以得到：</p><script type="math/tex; mode=display">    u_j^{i+1}=\frac{\tau}{h^2}(u_{j+1}^{i}-2u_j^i+u_{j-1}^i)+u_j^{i},</script><p>其中$i=0,1,\cdots,m-1$，$j=0,1,\cdots,n-1$。<a id="more"></a></p><h1 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h1><p>根据理论推导，用python编写程序如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Created on Sun May 23 11:16:13 2021</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: XieWenjin</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"></span><br><span class="line">t = <span class="number">0.03</span>     <span class="comment"># 时间范围</span></span><br><span class="line">x = <span class="number">1.0</span>      <span class="comment"># 空间范围</span></span><br><span class="line">m = <span class="built_in">input</span>(<span class="string">&quot;请输入m：&quot;</span>)</span><br><span class="line">m = <span class="built_in">int</span>(m)</span><br><span class="line">n = <span class="built_in">input</span>(<span class="string">&quot;请输入n：&quot;</span>)</span><br><span class="line">n = <span class="built_in">int</span>(n)</span><br><span class="line"><span class="comment"># m = 320        # 时间方向分为320个格子</span></span><br><span class="line"><span class="comment"># n = 64        # 空间方向的格子数</span></span><br><span class="line">dt = t / (m - <span class="number">1</span>)  <span class="comment"># 时间步长</span></span><br><span class="line">dx = x / (n - <span class="number">1</span>)  <span class="comment"># 空间步长</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_u</span>(<span class="params">m,n</span>):</span></span><br><span class="line">    u = np.zeros([m,n])</span><br><span class="line">    <span class="comment"># 边界条件</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        u[<span class="number">0</span>,j] = math.sin(<span class="number">4</span> * math.pi * j * dx)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        u[i,<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">        u[i,-<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 差分法</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n - <span class="number">1</span>):</span><br><span class="line">            u[i+<span class="number">1</span>, j] = dt * (u[i, j + <span class="number">1</span>] + u[i, j - <span class="number">1</span>] - <span class="number">2</span> * u[i, j]) / dx ** <span class="number">2</span> + u[i, j]</span><br><span class="line">    <span class="keyword">return</span> u</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawing</span>(<span class="params">X,Y,Z</span>):</span></span><br><span class="line">    fig = plt.figure()</span><br><span class="line">    ax = Axes3D(fig)</span><br><span class="line">    ax.plot_surface(X, Y, Z, rstride=<span class="number">1</span>, cstride=<span class="number">1</span>, cmap=<span class="string">&#x27;rainbow&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">error</span>(<span class="params">u,u_exact</span>):</span></span><br><span class="line">    err = <span class="built_in">abs</span>(u - u_exact)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">map</span>(<span class="built_in">max</span>, err))</span><br><span class="line"></span><br><span class="line">X = np.arange(<span class="number">0</span>, t + dt, dt) <span class="comment"># remark:t+dt,not t</span></span><br><span class="line">Y = np.arange(<span class="number">0</span>, x + dx, dx)</span><br><span class="line">X, Y = np.meshgrid(X, Y)</span><br><span class="line">u_exact = np.exp(- (<span class="number">4</span>*np.pi)**<span class="number">2</span>*X)*np.sin(<span class="number">4</span>*np.pi*Y)</span><br><span class="line"></span><br><span class="line">u = generate_u(m,n)</span><br><span class="line">u = np.transpose(u) <span class="comment"># 注意这里是转置，而不是np.reshape(u,(n,m))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(m,n)</span></span><br><span class="line">print(error(u,u_exact))</span><br><span class="line"></span><br><span class="line">drawing(X,Y,u) <span class="comment"># 数值解</span></span><br><span class="line"><span class="comment"># drawing(X,Y,u_exact) # 精确解</span></span><br><span class="line"><span class="comment"># drawing(X,Y,abs(u-u_exact)) # 数值解与精确解之差的绝对值</span></span><br></pre></td></tr></table></figure><h1 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h1><p>当取$m=320,n=64$时，得到数值解$[u]$如下图所示：</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="https://i.loli.net/2021/05/24/cMGvKnF4tpaeXAZ.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">数值解$[u]$</div></center><p>精确解$u$如下图所示：</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="https://i.loli.net/2021/05/24/eRQjX5DIwOpZyu2.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">精确解$u$</div></center><p>精确解与数值解之差的绝对值$||u-[u]||$如下图所示：</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="https://i.loli.net/2021/05/24/8jHizxdguJyIaNS.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">精确解与数值解之差的绝对值$||u-[u]||$</div></center><p>当取不同的$\tau,h$时，计算得到的误差如下表所示。</p><div class="table-container"><table><thead><tr><th>$\tau$</th><th>$h$</th><th>误差$e$</th><th>$e_i/e_{i+1}$</th></tr></thead><tbody><tr><td>$\frac{1}{10}$</td><td>$\frac{1}{10}$</td><td>0.0428079643162558</td><td></td></tr><tr><td>$\frac{1}{40}$</td><td>$\frac{1}{20}$</td><td>0.00951825176096948</td><td>4.4975</td></tr><tr><td>$\frac{1}{160}$</td><td>$\frac{1}{40}$</td><td>0.00244056613219328</td><td>3.9000</td></tr><tr><td>$\frac{1}{640}$</td><td>$\frac{1}{80}$</td><td>0.000606385251482932</td><td>4.0248</td></tr><tr><td>$\frac{1}{2560}$</td><td>$\frac{1}{160}$</td><td>0.000151362159712509</td><td>4.0062</td></tr></tbody></table></div><p>我们知道最简显格式的误差为$||[u]^k-u^k||=O(\tau + h^2)$，设$e_i=C \times (\tau_i + h_i^2)$，<br>取$\tau_{i+1}=\frac{1}{4} \tau_i$,$h_{i+1}=\frac{1}{2}h_i$，可以得到$\frac{e_i}{e_{i+1}}<br>=4$，与上表结果相符，从而也验证了最简显格式的误差阶数为$O(\tau + h^2)$.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;最简显格式&quot;&gt;&lt;a href=&quot;#最简显格式&quot; class=&quot;headerlink&quot; title=&quot;最简显格式&quot;&gt;&lt;/a&gt;最简显格式&lt;/h1&gt;&lt;p&gt;对于如下热传导方程：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
    \begin{cases}
        \frac{\partial u}{\partial t} =\frac{\partial ^2 u}{\partial t}  \quad 0&lt;t&lt;0.03,0&lt;x&lt;1 \\  
        u(x,0)=\sin(4\pi x) \quad 0 \le x \le 1 \\
        u(0,t)  = 0 \quad  0 \le t \le 0.03 \\
        u(1,t)  = 0 \quad 0 \le t \le 0.03
    \end{cases}&lt;/script&gt;&lt;p&gt;该方程的精确解为$u(t,x)=e^{-(4\pi)^2t}\sin (4 \pi x),0\le t \le 0.03, 0 \le x \le 1.$&lt;/p&gt;
&lt;p&gt;首先对时间及空间进行划分，将时间划分为$m-1$份，将空间划分为$n-1$份，则$\tau=\frac{0.03}{m-1},h=\frac{1}{n-1}$。&lt;br&gt;根据最简显格式可以得到：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
    u_j^{i+1}=\frac{\tau}{h^2}(u_{j+1}^{i}-2u_j^i+u_{j-1}^i)+u_j^{i},&lt;/script&gt;&lt;p&gt;其中$i=0,1,\cdots,m-1$，$j=0,1,\cdots,n-1$。</summary>
    
    
    
    <category term="微分方程数值解" scheme="http://example.com/categories/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3/"/>
    
    
    <category term="数值分析" scheme="http://example.com/tags/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/"/>
    
    <category term="微分方程数值解" scheme="http://example.com/tags/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3/"/>
    
    <category term="热传导方程" scheme="http://example.com/tags/%E7%83%AD%E4%BC%A0%E5%AF%BC%E6%96%B9%E7%A8%8B/"/>
    
    <category term="最简显格式" scheme="http://example.com/tags/%E6%9C%80%E7%AE%80%E6%98%BE%E6%A0%BC%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>121.买卖股票的最佳时机</title>
    <link href="http://example.com/2021/05/24/LeetCode/121.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/"/>
    <id>http://example.com/2021/05/24/LeetCode/121.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/</id>
    <published>2021-05-24T05:24:00.000Z</published>
    <updated>2021-05-24T05:34:57.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="官方链接"><a href="#官方链接" class="headerlink" title="官方链接"></a>官方链接</h1><p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/">题目</a><br><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/121-mai-mai-gu-piao-de-zui-jia-shi-ji-by-leetcode-/">官方解答</a></p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个数组<code>prices</code>，它的第<code>i</code>个元素<code>prices[i]</code>表示一支给定股票第<code>i</code>天的价格。  </p><p>你只能选择<strong>某一天</strong>买入这只股票，并选择在<strong>未来的某一个不同的日子</strong>卖出该股票。设计一个算法来计算你所能获取的最大利润。  </p><p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回<code>0</code>。<a id="more"></a> </p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：[7,1,5,3,6,4]</span><br><span class="line">输出：5</span><br><span class="line">解释：在第 2 天（股票价格 &#x3D; 1）的时候买入，在第 5 天（股票价格 &#x3D; 6）的时候卖出，最大利润 &#x3D; 6-1 &#x3D; 5 。</span><br><span class="line">注意利润不能是 7-1 &#x3D; 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：prices &#x3D; [7,6,4,3,1]</span><br><span class="line">输出：0</span><br><span class="line">解释：在这种情况下, 没有交易完成, 所以最大利润为 0。</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>1 &lt;= prices.length &lt;= $10^5$</li><li>0 &lt;= prices[i] &lt;= $10^4$</li></ul><h1 id="题解思路"><a href="#题解思路" class="headerlink" title="题解思路"></a>题解思路</h1><ul><li>最初的解答这道题的想法是找到数组中下标最小的最小值，再用每一天的价格减去这个最小值，最终得到的最大数是最大利润，在测试用例时，这种思路是不对的，如数组[2,4,1,1,1]，最小值为1，但算出来的利润其实为0，实际最大利润应为2。  </li><li>上述思路出错的原因是：不应该考虑整个数组的最小值，而应该考虑历史最小值。假设是自己在买股票，那么当天可以决定是否卖出股票，应该在历史最低处买入，再决定当天是否卖出股票。</li><li>Java代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> min = prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> maxprofit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (prices[i] &lt; min) &#123;</span><br><span class="line">                min = prices[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (prices[i] - min &gt; maxprofit) &#123;</span><br><span class="line">                maxprofit = prices[i] - min;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxprofit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度为$O(n)$，空间复杂度为$O(1)$。</li></ul><h1 id="Remark"><a href="#Remark" class="headerlink" title="Remark"></a>Remark</h1><ul><li>可以将最小值初始化为<code>prices[0]</code>，也可以初始化为<code>Integer.MAX_VALUE</code>。  </li><li>Java中数组按升序排列：<code>Arrays.sort(dp);</code></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;官方链接&quot;&gt;&lt;a href=&quot;#官方链接&quot; class=&quot;headerlink&quot; title=&quot;官方链接&quot;&gt;&lt;/a&gt;官方链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/&quot;&gt;题目&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/121-mai-mai-gu-piao-de-zui-jia-shi-ji-by-leetcode-/&quot;&gt;官方解答&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;给定一个数组&lt;code&gt;prices&lt;/code&gt;，它的第&lt;code&gt;i&lt;/code&gt;个元素&lt;code&gt;prices[i]&lt;/code&gt;表示一支给定股票第&lt;code&gt;i&lt;/code&gt;天的价格。  &lt;/p&gt;
&lt;p&gt;你只能选择&lt;strong&gt;某一天&lt;/strong&gt;买入这只股票，并选择在&lt;strong&gt;未来的某一个不同的日子&lt;/strong&gt;卖出该股票。设计一个算法来计算你所能获取的最大利润。  &lt;/p&gt;
&lt;p&gt;返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回&lt;code&gt;0&lt;/code&gt;。</summary>
    
    
    
    <category term="LeetCode" scheme="http://example.com/categories/LeetCode/"/>
    
    
    <category term="数组" scheme="http://example.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="LeetCode简单" scheme="http://example.com/tags/LeetCode%E7%AE%80%E5%8D%95/"/>
    
    <category term="动态规划" scheme="http://example.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>22.括号生成</title>
    <link href="http://example.com/2021/05/23/LeetCode/22.%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/"/>
    <id>http://example.com/2021/05/23/LeetCode/22.%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/</id>
    <published>2021-05-23T01:41:09.000Z</published>
    <updated>2021-05-23T01:43:20.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="官方链接"><a href="#官方链接" class="headerlink" title="官方链接"></a>官方链接</h1><p><a href="https://leetcode-cn.com/problems/generate-parentheses">题目</a><br><a href="https://leetcode-cn.com/problems/generate-parentheses/solution/gua-hao-sheng-cheng-by-leetcode-solution/">官方解答</a></p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。<br>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n &#x3D; 3</span><br><span class="line">输出：[&quot;((()))&quot;,&quot;(()())&quot;,&quot;(())()&quot;,&quot;()(())&quot;,&quot;()()()&quot;]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n &#x3D; 1</span><br><span class="line">输出：[&quot;()&quot;]</span><br></pre></td></tr></table></figure><p>提示：<br>1 &lt;= n &lt;= 8<a id="more"></a></p><h1 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h1><p>参考<a href="https://leetcode-cn.com/problems/generate-parentheses/solution/gua-hao-sheng-cheng-by-leetcode-solution/">官方解答</a>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; ans = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        backtrack(ans, <span class="keyword">new</span> StringBuilder(), <span class="number">0</span>, <span class="number">0</span>, n);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(List&lt;String&gt; ans, StringBuilder cur, <span class="keyword">int</span> open, <span class="keyword">int</span> close, <span class="keyword">int</span> max)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur.length() == max * <span class="number">2</span>) &#123;</span><br><span class="line">            ans.add(cur.toString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (open &lt; max) &#123;</span><br><span class="line">            cur.append(<span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">            backtrack(ans, cur, open + <span class="number">1</span>, close, max);</span><br><span class="line">            cur.deleteCharAt(cur.length() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (close &lt; open) &#123;</span><br><span class="line">            cur.append(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">            backtrack(ans, cur, open, close + <span class="number">1</span>, max);</span><br><span class="line">            cur.deleteCharAt(cur.length() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;官方链接&quot;&gt;&lt;a href=&quot;#官方链接&quot; class=&quot;headerlink&quot; title=&quot;官方链接&quot;&gt;&lt;/a&gt;官方链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/generate-parentheses&quot;&gt;题目&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/generate-parentheses/solution/gua-hao-sheng-cheng-by-leetcode-solution/&quot;&gt;官方解答&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。&lt;br&gt;示例 1：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：n &amp;#x3D; 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[&amp;quot;((()))&amp;quot;,&amp;quot;(()())&amp;quot;,&amp;quot;(())()&amp;quot;,&amp;quot;()(())&amp;quot;,&amp;quot;()()()&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例 2：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：n &amp;#x3D; 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：[&amp;quot;()&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示：&lt;br&gt;1 &amp;lt;= n &amp;lt;= 8</summary>
    
    
    
    <category term="LeetCode" scheme="http://example.com/categories/LeetCode/"/>
    
    
    <category term="LeetCode中等" scheme="http://example.com/tags/LeetCode%E4%B8%AD%E7%AD%89/"/>
    
    <category term="字符串" scheme="http://example.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="回溯算法" scheme="http://example.com/tags/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
