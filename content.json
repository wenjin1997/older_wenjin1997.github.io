[{"title":"欧拉方法、隐式欧拉方法","date":"2021-03-11T10:43:09.000Z","path":"2021/03/11/欧拉方法、隐式欧拉方法/","text":"求解如下常微分方程： {dudt=−ut,1≤t≤2u(1)=1\\begin{aligned} \\begin{cases} \\frac{du}{dt}=-\\frac{u}{t},1\\leq t\\leq 2\\\\ u(1)=1 \\end{cases} \\end{aligned} {dtdu​=−tu​,1≤t≤2u(1)=1​​ 精确解 将原方程化为tdu+udt=0tdu+udt=0tdu+udt=0，则有d(ut)=0d(ut)=0d(ut)=0，解得ut=Cut=Cut=C(CCC为常数)，代入初始条件得C=1C=1C=1，从而该方程的精确解为： u=1t,(1≤t≤2).\\begin{aligned} u=\\frac{1}{t},(1\\leq t \\leq2). \\end{aligned} u=t1​,(1≤t≤2).​ 欧拉方法 代入欧拉格式得： ui+1=ui+hf(ti,ui)=ui+h(−uiti)\\begin{aligned} u_{i+1}=u_{i}+hf(t_i,u_i)=u_i+h(-\\frac{u_i}{t_i}) \\end{aligned} ui+1​=ui​+hf(ti​,ui​)=ui​+h(−ti​ui​​)​ 隐式欧拉方法 由隐式欧拉格式得： ui+1=ui+hf(ti+1,ui+1)=ui+h(−ui+1ti+1)，\\begin{aligned} u_{i+1}=u_{i}+hf(t_{i+1},u_{i+1})=u_i+h(-\\frac{u_{i+1}}{t_{i+1}})， \\end{aligned} ui+1​=ui​+hf(ti+1​,ui+1​)=ui​+h(−ti+1​ui+1​​)，​ 移项化简可得： ui+1=ti+1uiti+1+h\\begin{aligned} u_{i+1}=\\frac{t_{i+1}u_i}{t_{i+1}+h} \\end{aligned} ui+1​=ti+1​+hti+1​ui​​​ 程序 根据上述推导，用python编写程序，代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445# implict euler methodimport numpy as npimport matplotlib.pyplot as plt# the right term of the ODEdef f(t, u): f = -u/t return f# the exact solution of ODE def fexact(t): fexact = 1/t return fexactN = 100t_n = 2.0dt = (t_n - 1.0) / Nt = np.arange(1.0, t_n + dt, dt)u_euler = np.arange(1.0, t_n + dt, dt)u = np.arange(1.0, t_n + dt, dt)u_true = np.arange(1.0, t_n + dt, dt)i = 0while i &lt; N: t[i+1] = t[i] + dt u_euler[i+1] = u_euler[i] + dt * f(t[i], u_euler[i]) u[i+1] = (u[i] * t[i+1])/(t[i+1] + dt) u_true[i+1] = fexact(t[i+1]) i = i + 1err_euler = max(abs(u_euler - u_true))err_implict_euler = max(abs(u - u_true))print(&quot;The error of euler method: &quot;,err_euler)print(&quot;The error of implict euler method: &quot;,err_implict_euler)# begin drawingplt.title(&#x27;Result&#x27;)plt.plot(t, u_euler, color=&#x27;green&#x27;, label=&#x27;euler&#x27;)plt.plot(t, u, color=&#x27;blue&#x27;, label=&#x27;implict euler&#x27;)plt.plot(t, u_true, color=&#x27;red&#x27;, label=&#x27;exact&#x27;)plt.legend() # show the legendplt.xlabel(&#x27;t&#x27;)plt.ylabel(&#x27;u&#x27;)plt.show() 结果分析 当取h=0.01h=0.01h=0.01时，此时欧拉方法的误差为0.02631578947368396，隐式欧拉方法的误差为0.023809523809523836，结果如下图所示： 当取不同hhh，得到的误差如下表所示： hhh 欧拉方法 隐式欧拉方法 12\\frac{1}{2}21​ 0.16666666666666663 0.09999999999999998 14\\frac{1}{4}41​ 0.0714285714285714 0.05555555555555558 18\\frac{1}{8}81​ 0.033333333333333215 0.02941176470588236 116\\frac{1}{16}161​ 0.01612903225806467 0.015151515151515138 132\\frac{1}{32}321​ 0.00793650793650813 0.007692307692307665 164\\frac{1}{64}641​ 0.0039370078740155193 0.003875968992248069","tags":[{"name":"欧拉方法","slug":"欧拉方法","permalink":"http://example.com/tags/%E6%AC%A7%E6%8B%89%E6%96%B9%E6%B3%95/"},{"name":"隐式欧拉方法","slug":"隐式欧拉方法","permalink":"http://example.com/tags/%E9%9A%90%E5%BC%8F%E6%AC%A7%E6%8B%89%E6%96%B9%E6%B3%95/"},{"name":"数值分析","slug":"数值分析","permalink":"http://example.com/tags/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/"},{"name":"微分方程数值解","slug":"微分方程数值解","permalink":"http://example.com/tags/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%95%B0%E5%80%BC%E8%A7%A3/"}]}]